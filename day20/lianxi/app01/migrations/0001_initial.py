# -*- coding: utf-8 -*-
# Generated by Django 1.11.9 on 2018-09-06 14:04
from __future__ import unicode_literals

import django.contrib.auth.models
import django.contrib.auth.validators
from django.db import migrations, models
import django.db.models.deletion
import django.utils.timezone


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0008_alter_user_username_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='UserInfo',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=30, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=30, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('phone', models.CharField(max_length=11)),
                ('avatar', models.FileField(default='avatars/default.png', upload_to='avatars/')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.Group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.Permission', verbose_name='user permissions')),
            ],
            options={
                'verbose_name_plural': 'users',
                'verbose_name': 'user',
                'abstract': False,
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='Comment',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.CharField(max_length=255)),
                ('create_time', models.DateTimeField(auto_now_add=True)),
            ],
            options={
                'verbose_name_plural': '评论',
                'verbose_name': '评论',
            },
        ),
        migrations.CreateModel(
            name='Fault2Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'verbose_name_plural': '故障-标签',
                'verbose_name': '故障-标签',
            },
        ),
        migrations.CreateModel(
            name='FaultDetail',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('content', models.TextField()),
            ],
            options={
                'verbose_name_plural': '故障详情表',
                'verbose_name': '故障详情表',
            },
        ),
        migrations.CreateModel(
            name='FaultReport',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=80, verbose_name='故障标题')),
                ('desc', models.CharField(max_length=255, verbose_name='故障简介')),
                ('create_time', models.DateTimeField(auto_now_add=True, verbose_name='发布时间')),
                ('modify_time', models.DateTimeField(auto_now=True, verbose_name='最后修改时间')),
                ('comment_count', models.IntegerField(default=0)),
                ('up_count', models.IntegerField(default=0)),
                ('down_count', models.IntegerField(default=0)),
            ],
            options={
                'verbose_name_plural': '故障总结/故障报告',
                'verbose_name': '故障总结/故障报告',
            },
        ),
        migrations.CreateModel(
            name='LOB',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, unique=True, verbose_name='业务线名称')),
            ],
            options={
                'verbose_name_plural': '业务线',
                'verbose_name': '业务线',
            },
        ),
        migrations.CreateModel(
            name='Tag',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=32, unique=True, verbose_name='标签名称')),
            ],
            options={
                'verbose_name_plural': '标签',
                'verbose_name': '标签',
            },
        ),
        migrations.CreateModel(
            name='UpDown',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('is_up', models.BooleanField(default=True, verbose_name='支持/反对')),
                ('fault_report', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.FaultReport', verbose_name='故障总结')),
                ('user', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.UserInfo', verbose_name='用户')),
            ],
            options={
                'verbose_name_plural': '支持/反对',
                'verbose_name': '支持/反对',
            },
        ),
        migrations.AddField(
            model_name='faultreport',
            name='lob',
            field=models.ForeignKey(null=True, on_delete=django.db.models.deletion.CASCADE, to='app01.LOB', verbose_name='所属业务线'),
        ),
        migrations.AddField(
            model_name='faultreport',
            name='tags',
            field=models.ManyToManyField(through='app01.Fault2Tag', to='app01.Tag'),
        ),
        migrations.AddField(
            model_name='faultreport',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.UserInfo', verbose_name='发布者'),
        ),
        migrations.AddField(
            model_name='faultdetail',
            name='fault',
            field=models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, to='app01.FaultReport'),
        ),
        migrations.AddField(
            model_name='fault2tag',
            name='fault_report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.FaultReport'),
        ),
        migrations.AddField(
            model_name='fault2tag',
            name='tag',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.Tag'),
        ),
        migrations.AddField(
            model_name='comment',
            name='fault_report',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.FaultReport', verbose_name='故障总结'),
        ),
        migrations.AddField(
            model_name='comment',
            name='parent_comment',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.CASCADE, to='app01.Comment'),
        ),
        migrations.AddField(
            model_name='comment',
            name='user',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='app01.UserInfo'),
        ),
        migrations.AlterUniqueTogether(
            name='updown',
            unique_together=set([('fault_report', 'user')]),
        ),
        migrations.AlterUniqueTogether(
            name='fault2tag',
            unique_together=set([('fault_report', 'tag')]),
        ),
    ]
